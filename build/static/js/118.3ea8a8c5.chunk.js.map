{"version":3,"file":"static/js/118.3ea8a8c5.chunk.js","mappings":"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","sources":["pages/auth/SignUpForm.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { Link, useNavigate } from 'react-router-dom';\r\nimport { register } from '../../services/authService';\r\nimport toast from 'react-hot-toast';\r\n\r\nconst SignUpForm = () => {\r\n  const [formData, setFormData] = useState({\r\n    username: '',\r\n    email: '',\r\n    password1: '',\r\n    password2: ''\r\n  });\r\n  const [errors, setErrors] = useState({});\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const navigate = useNavigate();\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setFormData((prev) => ({\r\n      ...prev,\r\n      [name]: value\r\n    }));\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    setIsLoading(true);\r\n    setErrors({});\r\n  \r\n    // Client-side validation\r\n    if (formData.password1 !== formData.password2) {\r\n      setErrors({ password2: 'Passwords must match' });\r\n      setIsLoading(false);\r\n      return;\r\n    }\r\n  \r\n    if (formData.password1.length < 8) {\r\n      setErrors({ password1: 'Password must be at least 8 characters long.' });\r\n      setIsLoading(false);\r\n      return;\r\n    }\r\n  \r\n    const emailPattern = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n    if (!emailPattern.test(formData.email)) {\r\n      setErrors({ email: 'Please enter a valid email address.' });\r\n      setIsLoading(false);\r\n      return;\r\n    }\r\n  \r\n    try {\r\n      await register(formData);\r\n      toast.success('Registration successful! Please check your email to verify your account.');\r\n      navigate('/signin');\r\n    } catch (err) {\r\n      console.error('Registration error response:', err.response);\r\n      const errorData = err.response?.data || { non_field_errors: ['Registration failed. Please try again.'] };\r\n      setErrors(errorData);\r\n      toast.error(errorData.non_field_errors ? errorData.non_field_errors.join(', ') : 'Registration failed');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const formFields = [\r\n    {\r\n      name: 'username',\r\n      label: 'Username',\r\n      type: 'text',\r\n      placeholder: 'Choose a username'\r\n    },\r\n    {\r\n      name: 'email',\r\n      label: 'Email',\r\n      type: 'email',\r\n      placeholder: 'Enter your email'\r\n    },\r\n    {\r\n      name: 'password1',\r\n      label: 'Password',\r\n      type: 'password',\r\n      placeholder: 'Choose a password'\r\n    },\r\n    {\r\n      name: 'password2',\r\n      label: 'Confirm Password',\r\n      type: 'password',\r\n      placeholder: 'Confirm your password'\r\n    }\r\n  ];\r\n\r\n  return (\r\n    <div className=\"flex flex-col items-center justify-center min-h-screen bg-gray-100\">\r\n      <div className=\"max-w-md w-full bg-white p-8 rounded-lg shadow-lg\">\r\n        <h2 className=\"text-2xl font-bold text-center text-green-600 mb-6\">Create Account</h2>\r\n        \r\n        <form onSubmit={handleSubmit} className=\"space-y-6\">\r\n          {formFields.map((field) => (\r\n            <div key={field.name}>\r\n              <label \r\n                htmlFor={field.name}\r\n                className=\"block text-sm font-medium text-gray-700\"\r\n              >\r\n                {field.label}\r\n              </label>\r\n              <input\r\n                type={field.type}\r\n                name={field.name}\r\n                id={field.name}\r\n                value={formData[field.name]}\r\n                onChange={handleChange}\r\n                placeholder={field.placeholder}\r\n                className={`mt-1 block w-full rounded-md shadow-sm\r\n                  ${errors[field.name] ? 'border-red-500' : 'border-gray-300'}\r\n                  focus:ring-green-500 focus:border-green-500\r\n                `}\r\n              />\r\n              {errors[field.name] && (\r\n                <p className=\"mt-1 text-sm text-red-500\">{errors[field.name]}</p>\r\n              )}\r\n            </div>\r\n          ))}\r\n\r\n          {errors.non_field_errors?.map((error, idx) => (\r\n            <div key={idx} className=\"text-sm text-red-500 text-center\">\r\n              {error}\r\n            </div>\r\n          ))}\r\n\r\n          <button\r\n            type=\"submit\"\r\n            disabled={isLoading}\r\n            className={`w-full py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white\r\n              ${isLoading ? 'bg-gray-400 cursor-not-allowed' : 'bg-green-600 hover:bg-green-700'}\r\n              focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500\r\n            `}\r\n          >\r\n            {isLoading ? 'Creating Account...' : 'Create Account'}\r\n          </button>\r\n          \r\n          <div className=\"text-center mt-4\">\r\n            <Link\r\n              to=\"/signin\"\r\n              className=\"text-sm text-green-600 hover:text-green-500\"\r\n            >\r\n              Already have an account? Sign in\r\n            </Link>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SignUpForm;\r\n"],"names":["SignUpForm","_errors$non_field_err","formData","setFormData","useState","username","email","password1","password2","errors","setErrors","isLoading","setIsLoading","navigate","useNavigate","handleChange","e","name","value","target","prev","_jsx","className","children","_jsxs","onSubmit","async","preventDefault","length","test","register","toast","success","err","_err$response","console","error","response","errorData","data","non_field_errors","join","label","type","placeholder","map","field","htmlFor","id","onChange","idx","disabled","Link","to"],"sourceRoot":""}