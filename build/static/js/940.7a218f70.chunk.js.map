{"version":3,"file":"static/js/940.7a218f70.chunk.js","mappings":"sMAOA,MA6HA,EA7HmBA,KAAO,IAADC,EAAAC,EAAAC,EACvB,MAAM,eAAEC,IAAmBC,EAAAA,EAAAA,MACpBC,EAAYC,IAAiBC,EAAAA,EAAAA,UAAS,CAAEC,SAAU,GAAIC,SAAU,MAChEC,EAAQC,IAAaJ,EAAAA,EAAAA,UAAS,CAAC,IAC/BK,EAAWC,IAAgBN,EAAAA,EAAAA,WAAS,GACrCO,GAAWC,EAAAA,EAAAA,MAEXC,EAAgBC,IACpB,MAAM,KAAEC,EAAI,MAAEC,GAAUF,EAAEG,OAC1Bd,GAAee,IAAI,IAAWA,EAAM,CAACH,GAAOC,KAAS,EAuCvD,OACEG,EAAAA,EAAAA,KAAA,OAAKC,UAAU,yEAAwEC,UACrFC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,oDAAmDC,SAAA,EAChEF,EAAAA,EAAAA,KAAA,MAAIC,UAAU,oDAAmDC,SAAC,aAElEC,EAAAA,EAAAA,MAAA,QAAMC,SAzCSC,UACnBV,EAAEW,iBACFf,GAAa,GACbF,EAAU,CAAC,GAEX,IAEEkB,QAAQC,IAAI,yBAA0B,CAAEtB,SAAUH,EAAWG,WAE7D,MAAMuB,QAAaC,EAAAA,GAAYC,MAAM5B,GAKrC,GAFAwB,QAAQC,IAAI,kBAAmBC,IAE3BA,EAAKG,OAAQH,EAAKI,MASpB,MAAM,IAAIC,MAAM,2BAPhBjC,EAAe4B,EAAKG,MAEpBG,aAAaC,QAAQ,QAASP,EAAKI,OAEnCI,EAAAA,GAAMC,QAAQ,iBACd1B,EAAS,aAIb,CAAE,MAAO2B,GAAM,IAADC,EACZb,QAAQc,MAAM,eAAgBF,GAC9BF,EAAAA,GAAMI,MAAMF,EAAIG,SAAW,qBAC3BjC,GAAsB,QAAZ+B,EAAAD,EAAII,gBAAQ,IAAAH,OAAA,EAAZA,EAAcX,OAAQ,CAC9Be,iBAAkB,CAAC,iCAEvB,CAAC,QACCjC,GAAa,EACf,GAQkCU,UAAU,YAAWC,SAAA,EACjDC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAOyB,QAAQ,WAAWxB,UAAU,0CAAyCC,SAAC,cAG9EF,EAAAA,EAAAA,KAAA,SACE0B,GAAG,WACHC,KAAK,OACL/B,KAAK,WACLC,MAAOd,EAAWG,SAClB0C,SAAUlC,EACVO,UAAW,uGACTb,EAAOF,SAAW,iBAAmB,IAEvC2C,UAAQ,IAEM,QADdnD,EACDU,EAAOF,gBAAQ,IAAAR,OAAA,EAAfA,EAAiBoD,KAAI,CAACR,EAASS,KAC9B/B,EAAAA,EAAAA,KAAA,KAAaC,UAAU,4BAA2BC,SAC/CoB,GADKS,SAMZ5B,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,SAAOyB,QAAQ,WAAWxB,UAAU,0CAAyCC,SAAC,cAG9EF,EAAAA,EAAAA,KAAA,SACE0B,GAAG,WACHC,KAAK,WACL/B,KAAK,WACLC,MAAOd,EAAWI,SAClByC,SAAUlC,EACVO,UAAW,uGACTb,EAAOD,SAAW,iBAAmB,IAEvC0C,UAAQ,IAEM,QADdlD,EACDS,EAAOD,gBAAQ,IAAAR,OAAA,EAAfA,EAAiBmD,KAAI,CAACR,EAASS,KAC9B/B,EAAAA,EAAAA,KAAA,KAAaC,UAAU,4BAA2BC,SAC/CoB,GADKS,QAMY,QAFlBnD,EAELQ,EAAOoC,wBAAgB,IAAA5C,OAAA,EAAvBA,EAAyBkD,KAAI,CAACR,EAASS,KACtC/B,EAAAA,EAAAA,KAAA,KAAaC,UAAU,mCAAkCC,SACtDoB,GADKS,MAKV/B,EAAAA,EAAAA,KAAA,UACE2B,KAAK,SACLK,SAAU1C,EACVW,UAAW,sHACTX,EAAY,cAAgB,6GAC8CY,SAE3EZ,EAAY,gBAAkB,aAGjCU,EAAAA,EAAAA,KAAA,OAAKC,UAAU,2BAA0BC,UACvCF,EAAAA,EAAAA,KAACiC,EAAAA,GAAI,CAACC,GAAG,UAAUjC,UAAU,kDAAiDC,SAAC,4CAMjF,C","sources":["pages/auth/SignInForm.js"],"sourcesContent":["// src/pages/auth/SignInForm.js\r\nimport React, { useState } from 'react';\r\nimport { Link, useNavigate } from 'react-router-dom';\r\nimport { useCurrentUser } from '../../contexts/CurrentUserContext';\r\nimport { authService } from '../../services/authService';\r\nimport toast from 'react-hot-toast';\r\n\r\nconst SignInForm = () => {\r\n  const { setCurrentUser } = useCurrentUser();\r\n  const [signInData, setSignInData] = useState({ username: '', password: '' });\r\n  const [errors, setErrors] = useState({});\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const navigate = useNavigate();\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setSignInData((prev) => ({ ...prev, [name]: value }));\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    setIsLoading(true);\r\n    setErrors({});\r\n\r\n    try {\r\n      // Log attempt\r\n      console.log('Attempting login with:', { username: signInData.username });\r\n      \r\n      const data = await authService.login(signInData);\r\n      \r\n      // Log successful response\r\n      console.log('Login response:', data);\r\n\r\n      if (data.user && data.token) {\r\n        // Set the user in context\r\n        setCurrentUser(data.user);\r\n        // Store token\r\n        localStorage.setItem('token', data.token);\r\n        \r\n        toast.success('Welcome back!');\r\n        navigate('/dashboard');\r\n      } else {\r\n        throw new Error('Invalid response format');\r\n      }\r\n    } catch (err) {\r\n      console.error('Login error:', err);\r\n      toast.error(err.message || 'Failed to sign in');\r\n      setErrors(err.response?.data || {\r\n        non_field_errors: ['Invalid username or password']\r\n      });\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex flex-col items-center justify-center min-h-screen bg-gray-100 p-4\">\r\n      <div className=\"max-w-md w-full bg-white p-8 rounded-lg shadow-lg\">\r\n        <h2 className=\"text-2xl font-bold text-center text-gray-900 mb-8\">Sign In</h2>\r\n        \r\n        <form onSubmit={handleSubmit} className=\"space-y-6\">\r\n          <div>\r\n            <label htmlFor=\"username\" className=\"block text-sm font-medium text-gray-700\">\r\n              Username\r\n            </label>\r\n            <input\r\n              id=\"username\"\r\n              type=\"text\"\r\n              name=\"username\"\r\n              value={signInData.username}\r\n              onChange={handleChange}\r\n              className={`mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-green-500 focus:ring-green-500 ${\r\n                errors.username ? 'border-red-500' : ''\r\n              }`}\r\n              required\r\n            />\r\n            {errors.username?.map((message, idx) => (\r\n              <p key={idx} className=\"mt-1 text-sm text-red-600\">\r\n                {message}\r\n              </p>\r\n            ))}\r\n          </div>\r\n\r\n          <div>\r\n            <label htmlFor=\"password\" className=\"block text-sm font-medium text-gray-700\">\r\n              Password\r\n            </label>\r\n            <input\r\n              id=\"password\"\r\n              type=\"password\"\r\n              name=\"password\"\r\n              value={signInData.password}\r\n              onChange={handleChange}\r\n              className={`mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-green-500 focus:ring-green-500 ${\r\n                errors.password ? 'border-red-500' : ''\r\n              }`}\r\n              required\r\n            />\r\n            {errors.password?.map((message, idx) => (\r\n              <p key={idx} className=\"mt-1 text-sm text-red-600\">\r\n                {message}\r\n              </p>\r\n            ))}\r\n          </div>\r\n\r\n          {errors.non_field_errors?.map((message, idx) => (\r\n            <p key={idx} className=\"text-sm text-red-600 text-center\">\r\n              {message}\r\n            </p>\r\n          ))}\r\n\r\n          <button\r\n            type=\"submit\"\r\n            disabled={isLoading}\r\n            className={`w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white ${\r\n              isLoading ? 'bg-gray-400' : 'bg-green-600 hover:bg-green-700'\r\n            } focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500`}\r\n          >\r\n            {isLoading ? 'Signing in...' : 'Sign In'}\r\n          </button>\r\n\r\n          <div className=\"text-sm text-center mt-4\">\r\n            <Link to=\"/signup\" className=\"font-medium text-green-600 hover:text-green-500\">\r\n              Don't have an account? Sign up\r\n            </Link>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SignInForm;"],"names":["SignInForm","_errors$username","_errors$password","_errors$non_field_err","setCurrentUser","useCurrentUser","signInData","setSignInData","useState","username","password","errors","setErrors","isLoading","setIsLoading","navigate","useNavigate","handleChange","e","name","value","target","prev","_jsx","className","children","_jsxs","onSubmit","async","preventDefault","console","log","data","authService","login","user","token","Error","localStorage","setItem","toast","success","err","_err$response","error","message","response","non_field_errors","htmlFor","id","type","onChange","required","map","idx","disabled","Link","to"],"sourceRoot":""}